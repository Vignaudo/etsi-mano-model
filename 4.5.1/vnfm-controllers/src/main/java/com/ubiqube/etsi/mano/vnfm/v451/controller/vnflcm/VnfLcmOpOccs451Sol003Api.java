/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.ubiqube.etsi.mano.vnfm.v451.controller.vnflcm;

import java.io.IOException;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ubiqube.etsi.mano.em.v451.model.vnfconfig.ProblemDetails;
import com.ubiqube.etsi.mano.em.v451.model.vnflcm.VnfLcmOpOcc;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;

@Validated
public interface VnfLcmOpOccs451Sol003Api {

	Logger log = LoggerFactory.getLogger(VnfLcmOpOccs451Sol003Api.class);

	default Optional<ObjectMapper> getObjectMapper() {
		return Optional.empty();
	}

	default Optional<HttpServletRequest> getRequest() {
		return Optional.empty();
	}

	default Optional<String> getAcceptHeader() {
		return getRequest().map(r -> r.getHeader("Accept"));
	}

	@Operation(summary = "", description = "The API consumer can use this method to query status information about multiple VNF lifecycle management operation occurrences. See clause 5.4.12.3.2. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "200 OK  Shall be returned when status information for zero or more VNF lifecycle management operation occurrences has been queried successfully. The response body shall contain in an array the status information about zero or more VNF lifecycle operation occurrences, as defined in clause 5.5.2.13. If the \"filter\" URI parameter or one of the \"all_fields\", \"fields\" (if supported), \"exclude_fields\" (if supported) or \"exclude_default\" URI parameters was supplied in the request, the data in the response body shall have been transformed according to the rules specified in clauses 5.2.2 and 5.3.2 of ETSI GS NFV-SOL 013, respectively. If the VNFM supports alternative 2 (paging) according to clause 5.4.2.1 of ETSI GS NFV-SOL 013 for this resource, inclusion of the Link HTTP header in this response shall follow the provisions in clause 5.4.2.3 of ETSI GS NFV-SOL 013. ", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VnfLcmOpOcc.class)))),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the message content contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a message content with an empty array. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_lcm_op_occs", produces = { "application/json" }, method = RequestMethod.GET)
	default ResponseEntity<List<VnfLcmOpOcc>> vnfLcmOpOccsGet(@Parameter(in = ParameterIn.HEADER, description = "Content-Types that are acceptable for the response. Reference: IETF RFC 7231. ", required = true, schema = @Schema()) @RequestHeader(value = "Accept", required = true) final String accept, @Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization,
			@Parameter(in = ParameterIn.QUERY, description = "Attribute-based filtering expression according to clause 5.2 of ETSI GS NFV-SOL 013 [8]. The VNFM shall support receiving this parameter as part of the URI query string. The NFVO may supply this parameter. All attribute names that appear in the VnfLcmOpOcc and in data types referenced from it shall be supported by the VNFM in the filter expression. ", schema = @Schema()) @Valid @RequestParam(value = "filter", required = false) final String filter, @Parameter(in = ParameterIn.QUERY, description = "Include all complex attributes in the response. See clause 5.3 of ETSI GS NFV-SOL 013 [8] for details. The VNFM shall support this parameter. ", schema = @Schema()) @Valid @RequestParam(value = "all_fields", required = false) final String allFields, @Parameter(in = ParameterIn.QUERY, description = "Complex attributes to be included into the response. See clause 5.3 of ETSI GS NFV-SOL 013 [8] for details. The VNFM should support this parameter. ", schema = @Schema()) @Valid @RequestParam(value = "fields", required = false) final String fields,
			@Parameter(in = ParameterIn.QUERY, description = "Complex attributes to be excluded from the response. See clause 5.3 of ETSI GS NFV-SOL 013 [8] for details. The VNFM should support this parameter. ", schema = @Schema()) @Valid @RequestParam(value = "exclude_fields", required = false) final String excludeFields, @Parameter(in = ParameterIn.QUERY, description = "Indicates to exclude the following complex attributes from the response. See  clause 5.3 of ETSI GS NFV-SOL 013 [8] for details. The VNFM shall support this parameter. The following attributes shall be excluded from the VnfLcmOpOcc structure in the response body if this parameter is provided, or none of the parameters \"all_fields,\" \"fields\", \"exclude_fields\", \"exclude_default\" are provided:   - operationParams   - error   - resourceChanges   - changedInfo   - changedExtConnectivity   - lcmCoordinations   - modificationsTriggeredByVnfPkgChange   - warnings", schema = @Schema()) @Valid @RequestParam(value = "exclude_default", required = false) final String excludeDefault,
			@Parameter(in = ParameterIn.QUERY, description = "Marker to obtain the next page of a paged response. Shall be supported by the VNFM if the VNFM supports alternative 2 (paging) according to clause 5.4.2.1 of ETSI GS NFV-SOL 013 [8] for this resource. ", schema = @Schema()) @Valid @RequestParam(value = "nextpage_opaque_marker", required = false) final String nextpageOpaqueMarker) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get().readValue(
							"[ {\n  \"lcmCoordinations\" : [ {\n    \"endpointType\" : \"MGMT\",\n    \"coordinationResult\" : \"CONTINUE\"\n  }, {\n    \"endpointType\" : \"MGMT\",\n    \"coordinationResult\" : \"CONTINUE\"\n  } ],\n  \"_links\" : {\n    \"self\" : {\n      \"href\" : \"href\"\n    }\n  },\n  \"operationState\" : \"STARTING\",\n  \"warnings\" : [ \"warnings\", \"warnings\" ],\n  \"error\" : {\n    \"instance\" : \"instance\",\n    \"detail\" : \"detail\",\n    \"type\" : \"type\",\n    \"title\" : \"title\",\n    \"status\" : 0\n  },\n  \"resourceChanges\" : {\n    \"affectedVirtualLinks\" : [ {\n      \"changeType\" : \"ADDED\",\n      \"vnfLinkPortIds\" : [ null, null ]\n    }, {\n      \"changeType\" : \"ADDED\",\n      \"vnfLinkPortIds\" : [ null, null ]\n    } ],\n    \"affectedVirtualStorages\" : [ {\n      \"changeType\" : \"ADDED\"\n    }, {\n      \"changeType\" : \"ADDED\"\n    } ],\n    \"affectedVnfcs\" : [ {\n      \"resourceDefinitionId\" : \"resourceDefinitionId\",\n      \"addedStorageResourceIds\" : [ null, null ],\n      \"metadata\" : { },\n      \"changeType\" : \"ADDED\",\n      \"affectedVnfcCpIds\" : [ null, null ],\n      \"id\" : \"id\",\n      \"vduId\" : \"vduId\",\n      \"computeResource\" : {\n        \"containerNamespace\" : \"containerNamespace\",\n        \"vimLevelAdditionalResourceInfo\" : {\n          \"hostName\" : \"hostName\",\n          \"persistentVolume\" : \"persistentVolume\"\n        },\n        \"vimLevelResourceType\" : \"vimLevelResourceType\"\n      },\n      \"removedStorageResourceIds\" : [ null, null ]\n    }, {\n      \"resourceDefinitionId\" : \"resourceDefinitionId\",\n      \"addedStorageResourceIds\" : [ null, null ],\n      \"metadata\" : { },\n      \"changeType\" : \"ADDED\",\n      \"affectedVnfcCpIds\" : [ null, null ],\n      \"id\" : \"id\",\n      \"vduId\" : \"vduId\",\n      \"computeResource\" : {\n        \"containerNamespace\" : \"containerNamespace\",\n        \"vimLevelAdditionalResourceInfo\" : {\n          \"hostName\" : \"hostName\",\n          \"persistentVolume\" : \"persistentVolume\"\n        },\n        \"vimLevelResourceType\" : \"vimLevelResourceType\"\n      },\n      \"removedStorageResourceIds\" : [ null, null ]\n    } ],\n    \"affectedExtLinkPorts\" : [ {\n      \"changeType\" : \"ADDED\"\n    }, {\n      \"changeType\" : \"ADDED\"\n    } ]\n  },\n  \"cancelMode\" : \"GRACEFUL\",\n  \"rejectedLcmCoordinations\" : [ {\n    \"endpointType\" : \"MGMT\"\n  }, {\n    \"endpointType\" : \"MGMT\"\n  } ],\n  \"operationParams\" : { },\n  \"modificationsTriggeredByVnfPkgChange\" : {\n    \"vnfProductName\" : \"vnfProductName\",\n    \"vimConnectionInfo\" : { },\n    \"vnfProvider\" : \"vnfProvider\"\n  },\n  \"stateEnteredTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"affectedVipCps\" : [ {\n    \"changeType\" : \"ADDED\"\n  }, {\n    \"changeType\" : \"ADDED\"\n  } ],\n  \"changedInfo\" : {\n    \"vimConnectionInfo\" : {\n      \"key\" : {\n        \"vimType\" : \"vimType\"\n      }\n    },\n    \"vnfInstanceName\" : \"vnfInstanceName\",\n    \"vnfSoftwareVersion\" : \"vnfSoftwareVersion\"\n  },\n  \"changedExtConnectivity\" : [ {\n    \"extNetAttDefResource\" : [ {\n      \"associatedExtCpId\" : [ null, null ],\n      \"associatedVnfcCpId\" : [ null, null ]\n    }, {\n      \"associatedExtCpId\" : [ null, null ],\n      \"associatedVnfcCpId\" : [ null, null ]\n    } ],\n    \"extLinkPorts\" : [ { }, { } ],\n    \"currentVnfExtCpData\" : [ {\n      \"cpConfig\" : {\n        \"key\" : {\n          \"cpProtocolData\" : [ {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          }, {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          } ],\n          \"netAttDefResourceId\" : [ null, null ],\n          \"createExtLinkPort\" : true\n        }\n      }\n    }, {\n      \"cpConfig\" : {\n        \"key\" : {\n          \"cpProtocolData\" : [ {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          }, {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          } ],\n          \"netAttDefResourceId\" : [ null, null ],\n          \"createExtLinkPort\" : true\n        }\n      }\n    } ]\n  }, {\n    \"extNetAttDefResource\" : [ {\n      \"associatedExtCpId\" : [ null, null ],\n      \"associatedVnfcCpId\" : [ null, null ]\n    }, {\n      \"associatedExtCpId\" : [ null, null ],\n      \"associatedVnfcCpId\" : [ null, null ]\n    } ],\n    \"extLinkPorts\" : [ { }, { } ],\n    \"currentVnfExtCpData\" : [ {\n      \"cpConfig\" : {\n        \"key\" : {\n          \"cpProtocolData\" : [ {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          }, {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          } ],\n          \"netAttDefResourceId\" : [ null, null ],\n          \"createExtLinkPort\" : true\n        }\n      }\n    }, {\n      \"cpConfig\" : {\n        \"key\" : {\n          \"cpProtocolData\" : [ {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          }, {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          } ],\n          \"netAttDefResourceId\" : [ null, null ],\n          \"createExtLinkPort\" : true\n        }\n      }\n    } ]\n  } ],\n  \"id\" : \"id\",\n  \"isAutomaticInvocation\" : true,\n  \"operation\" : \"INSTANTIATE\"\n}, {\n  \"lcmCoordinations\" : [ {\n    \"endpointType\" : \"MGMT\",\n    \"coordinationResult\" : \"CONTINUE\"\n  }, {\n    \"endpointType\" : \"MGMT\",\n    \"coordinationResult\" : \"CONTINUE\"\n  } ],\n  \"_links\" : {\n    \"self\" : {\n      \"href\" : \"href\"\n    }\n  },\n  \"operationState\" : \"STARTING\",\n  \"warnings\" : [ \"warnings\", \"warnings\" ],\n  \"error\" : {\n    \"instance\" : \"instance\",\n    \"detail\" : \"detail\",\n    \"type\" : \"type\",\n    \"title\" : \"title\",\n    \"status\" : 0\n  },\n  \"resourceChanges\" : {\n    \"affectedVirtualLinks\" : [ {\n      \"changeType\" : \"ADDED\",\n      \"vnfLinkPortIds\" : [ null, null ]\n    }, {\n      \"changeType\" : \"ADDED\",\n      \"vnfLinkPortIds\" : [ null, null ]\n    } ],\n    \"affectedVirtualStorages\" : [ {\n      \"changeType\" : \"ADDED\"\n    }, {\n      \"changeType\" : \"ADDED\"\n    } ],\n    \"affectedVnfcs\" : [ {\n      \"resourceDefinitionId\" : \"resourceDefinitionId\",\n      \"addedStorageResourceIds\" : [ null, null ],\n      \"metadata\" : { },\n      \"changeType\" : \"ADDED\",\n      \"affectedVnfcCpIds\" : [ null, null ],\n      \"id\" : \"id\",\n      \"vduId\" : \"vduId\",\n      \"computeResource\" : {\n        \"containerNamespace\" : \"containerNamespace\",\n        \"vimLevelAdditionalResourceInfo\" : {\n          \"hostName\" : \"hostName\",\n          \"persistentVolume\" : \"persistentVolume\"\n        },\n        \"vimLevelResourceType\" : \"vimLevelResourceType\"\n      },\n      \"removedStorageResourceIds\" : [ null, null ]\n    }, {\n      \"resourceDefinitionId\" : \"resourceDefinitionId\",\n      \"addedStorageResourceIds\" : [ null, null ],\n      \"metadata\" : { },\n      \"changeType\" : \"ADDED\",\n      \"affectedVnfcCpIds\" : [ null, null ],\n      \"id\" : \"id\",\n      \"vduId\" : \"vduId\",\n      \"computeResource\" : {\n        \"containerNamespace\" : \"containerNamespace\",\n        \"vimLevelAdditionalResourceInfo\" : {\n          \"hostName\" : \"hostName\",\n          \"persistentVolume\" : \"persistentVolume\"\n        },\n        \"vimLevelResourceType\" : \"vimLevelResourceType\"\n      },\n      \"removedStorageResourceIds\" : [ null, null ]\n    } ],\n    \"affectedExtLinkPorts\" : [ {\n      \"changeType\" : \"ADDED\"\n    }, {\n      \"changeType\" : \"ADDED\"\n    } ]\n  },\n  \"cancelMode\" : \"GRACEFUL\",\n  \"rejectedLcmCoordinations\" : [ {\n    \"endpointType\" : \"MGMT\"\n  }, {\n    \"endpointType\" : \"MGMT\"\n  } ],\n  \"operationParams\" : { },\n  \"modificationsTriggeredByVnfPkgChange\" : {\n    \"vnfProductName\" : \"vnfProductName\",\n    \"vimConnectionInfo\" : { },\n    \"vnfProvider\" : \"vnfProvider\"\n  },\n  \"stateEnteredTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"affectedVipCps\" : [ {\n    \"changeType\" : \"ADDED\"\n  }, {\n    \"changeType\" : \"ADDED\"\n  } ],\n  \"changedInfo\" : {\n    \"vimConnectionInfo\" : {\n      \"key\" : {\n        \"vimType\" : \"vimType\"\n      }\n    },\n    \"vnfInstanceName\" : \"vnfInstanceName\",\n    \"vnfSoftwareVersion\" : \"vnfSoftwareVersion\"\n  },\n  \"changedExtConnectivity\" : [ {\n    \"extNetAttDefResource\" : [ {\n      \"associatedExtCpId\" : [ null, null ],\n      \"associatedVnfcCpId\" : [ null, null ]\n    }, {\n      \"associatedExtCpId\" : [ null, null ],\n      \"associatedVnfcCpId\" : [ null, null ]\n    } ],\n    \"extLinkPorts\" : [ { }, { } ],\n    \"currentVnfExtCpData\" : [ {\n      \"cpConfig\" : {\n        \"key\" : {\n          \"cpProtocolData\" : [ {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          }, {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          } ],\n          \"netAttDefResourceId\" : [ null, null ],\n          \"createExtLinkPort\" : true\n        }\n      }\n    }, {\n      \"cpConfig\" : {\n        \"key\" : {\n          \"cpProtocolData\" : [ {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          }, {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          } ],\n          \"netAttDefResourceId\" : [ null, null ],\n          \"createExtLinkPort\" : true\n        }\n      }\n    } ]\n  }, {\n    \"extNetAttDefResource\" : [ {\n      \"associatedExtCpId\" : [ null, null ],\n      \"associatedVnfcCpId\" : [ null, null ]\n    }, {\n      \"associatedExtCpId\" : [ null, null ],\n      \"associatedVnfcCpId\" : [ null, null ]\n    } ],\n    \"extLinkPorts\" : [ { }, { } ],\n    \"currentVnfExtCpData\" : [ {\n      \"cpConfig\" : {\n        \"key\" : {\n          \"cpProtocolData\" : [ {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          }, {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          } ],\n          \"netAttDefResourceId\" : [ null, null ],\n          \"createExtLinkPort\" : true\n        }\n      }\n    }, {\n      \"cpConfig\" : {\n        \"key\" : {\n          \"cpProtocolData\" : [ {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          }, {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          } ],\n          \"netAttDefResourceId\" : [ null, null ],\n          \"createExtLinkPort\" : true\n        }\n      }\n    } ]\n  } ],\n  \"id\" : \"id\",\n  \"isAutomaticInvocation\" : true,\n  \"operation\" : \"INSTANTIATE\"\n} ]",
							List.class), HttpStatus.NOT_IMPLEMENTED);
				} catch (final IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfLcmOpOccsApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The POST method initiates cancelling an ongoing VNF lifecycle operation while it is being executed or rolled back, i.e. the related \"Individual VNF LCM operation occurrence\" resource is either in \"STARTING\" or \"PROCESSING\" or \"ROLLING_BACK\" state. See clause 5.4.17.3.1. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "202", description = "202 ACCEPTED  Shall be returned when the request has been accepted for processing. The response shall have an empty message content. "),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the message content contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND  Shall be returned upon the following error: The API producer did not find a current representation for the target resource or is not willing to disclose that one exists. The general cause for this error and its handling is specified in clause 6.4 of ETSI GS NFV-SOL 013 [8], including rules for the presence of the response body. Specifically in case of this task resource, the response code 404 shall also be returned if the task is not supported for the VNF LCM operation occurrence represented by the parent resource, which means that the task resource consequently does not exist. In this case, the response body shall be present, and shall contain a ProblemDetails structure, in which the \"detail\" attribute shall convey more information about the error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT  Shall be returned upon the following error: The operation cannot be executed currently, due to a conflict with the state of the VNF LCM operation occurrence. Typically, this is due to the fact that the operation occurrence is not in STARTING, PROCESSING or ROLLING_BACK state. The response body shall contain a ProblemDetails structure, in which the \"detail\" attribute shall convey more information about the error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_lcm_op_occs/{vnfLcmOpOccId}/cancel", produces = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> vnfLcmOpOccsVnfLcmOpOccIdCancelPost(@Parameter(in = ParameterIn.PATH, description = "Identifier of a VNF lifecycle management operation occurrence. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a PATCH or POST request triggering a VNF LCM operation. It can also be retrieved from the \"vnfLcmOpOccId\" attribute in the VnfLcmOperationOccurrenceNotification. ", required = true, schema = @Schema()) @PathVariable("vnfLcmOpOccId") final String vnfLcmOpOccId, @Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfLcmOpOccsApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The POST method marks a VNF lifecycle management operation occurrence as \"finally failed\" if that operation occurrence is in \"FAILED_TEMP\" state. See clause 5.4.16.3.1. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "200 OK  Shall be returned when the state of the VNF lifecycle management operation occurrence has been changed successfully. The response bofyshall include a representation of the \"Individual VNF lifecycle operation occurrence\"  resource. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VnfLcmOpOcc.class))),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the message content contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND  Shall be returned upon the following error: The API producer did not find a current representation for the target resource or is not willing to disclose that one exists. The general cause for this error and its handling is specified in clause 6.4 of ETSI GS NFV-SOL 013 [8], including rules for the presence of the response body. Specifically in case of this task resource, the response code 404 shall also be returned if the task is not supported for the VNF LCM operation occurrence represented by the parent resource, which means that the task resource consequently does not exist. In this case, the response body shall be present, and shall contain a ProblemDetails structure, in which the \"detail\" attribute shall convey more information about the error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT  Shall be returned upon the following error: The operation cannot be executed currently, due to a conflict with the state of the VNF LCM operation occurrence. Typically, this is due to the fact that the VNF LCM operation occurrence is not in FAILED_TEMP state, or another error handling action is starting, such as retry or rollback. The response body shall contain a ProblemDetails structure, in which the \"detail\" attribute shall convey more information about the error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_lcm_op_occs/{vnfLcmOpOccId}/fail", produces = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<VnfLcmOpOcc> vnfLcmOpOccsVnfLcmOpOccIdFailPost(@Parameter(in = ParameterIn.PATH, description = "Identifier of a VNF lifecycle management operation occurrence. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a PATCH or POST request triggering a VNF LCM operation. It can also be retrieved from the \"vnfLcmOpOccId\" attribute in the VnfLcmOperationOccurrenceNotification. ", required = true, schema = @Schema()) @PathVariable("vnfLcmOpOccId") final String vnfLcmOpOccId, @Parameter(in = ParameterIn.HEADER, description = "Content-Types that are acceptable for the response. Reference: IETF RFC 7231. ", required = true, schema = @Schema()) @RequestHeader(value = "Accept", required = true) final String accept, @Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version,
			@Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get().readValue(
							"{\n  \"lcmCoordinations\" : [ {\n    \"endpointType\" : \"MGMT\",\n    \"coordinationResult\" : \"CONTINUE\"\n  }, {\n    \"endpointType\" : \"MGMT\",\n    \"coordinationResult\" : \"CONTINUE\"\n  } ],\n  \"_links\" : {\n    \"self\" : {\n      \"href\" : \"href\"\n    }\n  },\n  \"operationState\" : \"STARTING\",\n  \"warnings\" : [ \"warnings\", \"warnings\" ],\n  \"error\" : {\n    \"instance\" : \"instance\",\n    \"detail\" : \"detail\",\n    \"type\" : \"type\",\n    \"title\" : \"title\",\n    \"status\" : 0\n  },\n  \"resourceChanges\" : {\n    \"affectedVirtualLinks\" : [ {\n      \"changeType\" : \"ADDED\",\n      \"vnfLinkPortIds\" : [ null, null ]\n    }, {\n      \"changeType\" : \"ADDED\",\n      \"vnfLinkPortIds\" : [ null, null ]\n    } ],\n    \"affectedVirtualStorages\" : [ {\n      \"changeType\" : \"ADDED\"\n    }, {\n      \"changeType\" : \"ADDED\"\n    } ],\n    \"affectedVnfcs\" : [ {\n      \"resourceDefinitionId\" : \"resourceDefinitionId\",\n      \"addedStorageResourceIds\" : [ null, null ],\n      \"metadata\" : { },\n      \"changeType\" : \"ADDED\",\n      \"affectedVnfcCpIds\" : [ null, null ],\n      \"id\" : \"id\",\n      \"vduId\" : \"vduId\",\n      \"computeResource\" : {\n        \"containerNamespace\" : \"containerNamespace\",\n        \"vimLevelAdditionalResourceInfo\" : {\n          \"hostName\" : \"hostName\",\n          \"persistentVolume\" : \"persistentVolume\"\n        },\n        \"vimLevelResourceType\" : \"vimLevelResourceType\"\n      },\n      \"removedStorageResourceIds\" : [ null, null ]\n    }, {\n      \"resourceDefinitionId\" : \"resourceDefinitionId\",\n      \"addedStorageResourceIds\" : [ null, null ],\n      \"metadata\" : { },\n      \"changeType\" : \"ADDED\",\n      \"affectedVnfcCpIds\" : [ null, null ],\n      \"id\" : \"id\",\n      \"vduId\" : \"vduId\",\n      \"computeResource\" : {\n        \"containerNamespace\" : \"containerNamespace\",\n        \"vimLevelAdditionalResourceInfo\" : {\n          \"hostName\" : \"hostName\",\n          \"persistentVolume\" : \"persistentVolume\"\n        },\n        \"vimLevelResourceType\" : \"vimLevelResourceType\"\n      },\n      \"removedStorageResourceIds\" : [ null, null ]\n    } ],\n    \"affectedExtLinkPorts\" : [ {\n      \"changeType\" : \"ADDED\"\n    }, {\n      \"changeType\" : \"ADDED\"\n    } ]\n  },\n  \"cancelMode\" : \"GRACEFUL\",\n  \"rejectedLcmCoordinations\" : [ {\n    \"endpointType\" : \"MGMT\"\n  }, {\n    \"endpointType\" : \"MGMT\"\n  } ],\n  \"operationParams\" : { },\n  \"modificationsTriggeredByVnfPkgChange\" : {\n    \"vnfProductName\" : \"vnfProductName\",\n    \"vimConnectionInfo\" : { },\n    \"vnfProvider\" : \"vnfProvider\"\n  },\n  \"stateEnteredTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"affectedVipCps\" : [ {\n    \"changeType\" : \"ADDED\"\n  }, {\n    \"changeType\" : \"ADDED\"\n  } ],\n  \"changedInfo\" : {\n    \"vimConnectionInfo\" : {\n      \"key\" : {\n        \"vimType\" : \"vimType\"\n      }\n    },\n    \"vnfInstanceName\" : \"vnfInstanceName\",\n    \"vnfSoftwareVersion\" : \"vnfSoftwareVersion\"\n  },\n  \"changedExtConnectivity\" : [ {\n    \"extNetAttDefResource\" : [ {\n      \"associatedExtCpId\" : [ null, null ],\n      \"associatedVnfcCpId\" : [ null, null ]\n    }, {\n      \"associatedExtCpId\" : [ null, null ],\n      \"associatedVnfcCpId\" : [ null, null ]\n    } ],\n    \"extLinkPorts\" : [ { }, { } ],\n    \"currentVnfExtCpData\" : [ {\n      \"cpConfig\" : {\n        \"key\" : {\n          \"cpProtocolData\" : [ {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          }, {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          } ],\n          \"netAttDefResourceId\" : [ null, null ],\n          \"createExtLinkPort\" : true\n        }\n      }\n    }, {\n      \"cpConfig\" : {\n        \"key\" : {\n          \"cpProtocolData\" : [ {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          }, {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          } ],\n          \"netAttDefResourceId\" : [ null, null ],\n          \"createExtLinkPort\" : true\n        }\n      }\n    } ]\n  }, {\n    \"extNetAttDefResource\" : [ {\n      \"associatedExtCpId\" : [ null, null ],\n      \"associatedVnfcCpId\" : [ null, null ]\n    }, {\n      \"associatedExtCpId\" : [ null, null ],\n      \"associatedVnfcCpId\" : [ null, null ]\n    } ],\n    \"extLinkPorts\" : [ { }, { } ],\n    \"currentVnfExtCpData\" : [ {\n      \"cpConfig\" : {\n        \"key\" : {\n          \"cpProtocolData\" : [ {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          }, {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          } ],\n          \"netAttDefResourceId\" : [ null, null ],\n          \"createExtLinkPort\" : true\n        }\n      }\n    }, {\n      \"cpConfig\" : {\n        \"key\" : {\n          \"cpProtocolData\" : [ {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          }, {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          } ],\n          \"netAttDefResourceId\" : [ null, null ],\n          \"createExtLinkPort\" : true\n        }\n      }\n    } ]\n  } ],\n  \"id\" : \"id\",\n  \"isAutomaticInvocation\" : true,\n  \"operation\" : \"INSTANTIATE\"\n}",
							VnfLcmOpOcc.class), HttpStatus.NOT_IMPLEMENTED);
				} catch (final IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfLcmOpOccsApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The API consumer can use this method to retrieve status information about a VNF lifecycle management operation occurrence by reading an \"Individual VNF LCM operation occurrence\" resource. See clause 5.4.13.3.2. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "200 OK  Shall be returned when information about a VNF LCM operation occurrence washas been read successfully. The response body shall contain status information about a VNF lifecycle management operation occurrence (see clause 5.5.2.13). ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VnfLcmOpOcc.class))),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the message content contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND If the API producer did not find a current representation for the resource addressed by the URI passed in the request or is not willing to disclose that one exists, it shall respond with this response code. The \"ProblemDetails\" structure may be provided, including in the \"detail\" attribute information about the source of the problem, e.g. a wrong resource URI variable. This response code is not appropriate in case the resource addressed by the URI is a container resource which is designed to contain child resources, but does not contain any child resource at the time the request is received. For a GET request to an existing empty container resource, a typical response contains a 200 OK response code and a message content with an empty array. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_lcm_op_occs/{vnfLcmOpOccId}", produces = { "application/json" }, method = RequestMethod.GET)
	default ResponseEntity<VnfLcmOpOcc> vnfLcmOpOccsVnfLcmOpOccIdGet(@Parameter(in = ParameterIn.PATH, description = "Identifier of a VNF lifecycle management operation occurrence. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a PATCH or POST request triggering a VNF LCM operation. It can also be retrieved from the \"vnfLcmOpOccId\" attribute in the VnfLcmOperationOccurrenceNotification. ", required = true, schema = @Schema()) @PathVariable("vnfLcmOpOccId") final String vnfLcmOpOccId, @Parameter(in = ParameterIn.HEADER, description = "Content-Types that are acceptable for the response. Reference: IETF RFC 7231. ", required = true, schema = @Schema()) @RequestHeader(value = "Accept", required = true) final String accept, @Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version,
			@Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return new ResponseEntity<>(getObjectMapper().get().readValue(
							"{\n  \"lcmCoordinations\" : [ {\n    \"endpointType\" : \"MGMT\",\n    \"coordinationResult\" : \"CONTINUE\"\n  }, {\n    \"endpointType\" : \"MGMT\",\n    \"coordinationResult\" : \"CONTINUE\"\n  } ],\n  \"_links\" : {\n    \"self\" : {\n      \"href\" : \"href\"\n    }\n  },\n  \"operationState\" : \"STARTING\",\n  \"warnings\" : [ \"warnings\", \"warnings\" ],\n  \"error\" : {\n    \"instance\" : \"instance\",\n    \"detail\" : \"detail\",\n    \"type\" : \"type\",\n    \"title\" : \"title\",\n    \"status\" : 0\n  },\n  \"resourceChanges\" : {\n    \"affectedVirtualLinks\" : [ {\n      \"changeType\" : \"ADDED\",\n      \"vnfLinkPortIds\" : [ null, null ]\n    }, {\n      \"changeType\" : \"ADDED\",\n      \"vnfLinkPortIds\" : [ null, null ]\n    } ],\n    \"affectedVirtualStorages\" : [ {\n      \"changeType\" : \"ADDED\"\n    }, {\n      \"changeType\" : \"ADDED\"\n    } ],\n    \"affectedVnfcs\" : [ {\n      \"resourceDefinitionId\" : \"resourceDefinitionId\",\n      \"addedStorageResourceIds\" : [ null, null ],\n      \"metadata\" : { },\n      \"changeType\" : \"ADDED\",\n      \"affectedVnfcCpIds\" : [ null, null ],\n      \"id\" : \"id\",\n      \"vduId\" : \"vduId\",\n      \"computeResource\" : {\n        \"containerNamespace\" : \"containerNamespace\",\n        \"vimLevelAdditionalResourceInfo\" : {\n          \"hostName\" : \"hostName\",\n          \"persistentVolume\" : \"persistentVolume\"\n        },\n        \"vimLevelResourceType\" : \"vimLevelResourceType\"\n      },\n      \"removedStorageResourceIds\" : [ null, null ]\n    }, {\n      \"resourceDefinitionId\" : \"resourceDefinitionId\",\n      \"addedStorageResourceIds\" : [ null, null ],\n      \"metadata\" : { },\n      \"changeType\" : \"ADDED\",\n      \"affectedVnfcCpIds\" : [ null, null ],\n      \"id\" : \"id\",\n      \"vduId\" : \"vduId\",\n      \"computeResource\" : {\n        \"containerNamespace\" : \"containerNamespace\",\n        \"vimLevelAdditionalResourceInfo\" : {\n          \"hostName\" : \"hostName\",\n          \"persistentVolume\" : \"persistentVolume\"\n        },\n        \"vimLevelResourceType\" : \"vimLevelResourceType\"\n      },\n      \"removedStorageResourceIds\" : [ null, null ]\n    } ],\n    \"affectedExtLinkPorts\" : [ {\n      \"changeType\" : \"ADDED\"\n    }, {\n      \"changeType\" : \"ADDED\"\n    } ]\n  },\n  \"cancelMode\" : \"GRACEFUL\",\n  \"rejectedLcmCoordinations\" : [ {\n    \"endpointType\" : \"MGMT\"\n  }, {\n    \"endpointType\" : \"MGMT\"\n  } ],\n  \"operationParams\" : { },\n  \"modificationsTriggeredByVnfPkgChange\" : {\n    \"vnfProductName\" : \"vnfProductName\",\n    \"vimConnectionInfo\" : { },\n    \"vnfProvider\" : \"vnfProvider\"\n  },\n  \"stateEnteredTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"affectedVipCps\" : [ {\n    \"changeType\" : \"ADDED\"\n  }, {\n    \"changeType\" : \"ADDED\"\n  } ],\n  \"changedInfo\" : {\n    \"vimConnectionInfo\" : {\n      \"key\" : {\n        \"vimType\" : \"vimType\"\n      }\n    },\n    \"vnfInstanceName\" : \"vnfInstanceName\",\n    \"vnfSoftwareVersion\" : \"vnfSoftwareVersion\"\n  },\n  \"changedExtConnectivity\" : [ {\n    \"extNetAttDefResource\" : [ {\n      \"associatedExtCpId\" : [ null, null ],\n      \"associatedVnfcCpId\" : [ null, null ]\n    }, {\n      \"associatedExtCpId\" : [ null, null ],\n      \"associatedVnfcCpId\" : [ null, null ]\n    } ],\n    \"extLinkPorts\" : [ { }, { } ],\n    \"currentVnfExtCpData\" : [ {\n      \"cpConfig\" : {\n        \"key\" : {\n          \"cpProtocolData\" : [ {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          }, {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          } ],\n          \"netAttDefResourceId\" : [ null, null ],\n          \"createExtLinkPort\" : true\n        }\n      }\n    }, {\n      \"cpConfig\" : {\n        \"key\" : {\n          \"cpProtocolData\" : [ {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          }, {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          } ],\n          \"netAttDefResourceId\" : [ null, null ],\n          \"createExtLinkPort\" : true\n        }\n      }\n    } ]\n  }, {\n    \"extNetAttDefResource\" : [ {\n      \"associatedExtCpId\" : [ null, null ],\n      \"associatedVnfcCpId\" : [ null, null ]\n    }, {\n      \"associatedExtCpId\" : [ null, null ],\n      \"associatedVnfcCpId\" : [ null, null ]\n    } ],\n    \"extLinkPorts\" : [ { }, { } ],\n    \"currentVnfExtCpData\" : [ {\n      \"cpConfig\" : {\n        \"key\" : {\n          \"cpProtocolData\" : [ {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          }, {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          } ],\n          \"netAttDefResourceId\" : [ null, null ],\n          \"createExtLinkPort\" : true\n        }\n      }\n    }, {\n      \"cpConfig\" : {\n        \"key\" : {\n          \"cpProtocolData\" : [ {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          }, {\n            \"virtualCpAddress\" : {\n              \"addressPoolName\" : \"addressPoolName\",\n              \"type\" : \"IPV4\"\n            },\n            \"ipOverEthernet\" : {\n              \"segmentationType\" : \"VLAN\",\n              \"ipAddresses\" : [ {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              }, {\n                \"fixedAddresses\" : [ null, null ],\n                \"addressRange\" : { },\n                \"type\" : \"IPV4\",\n                \"numDynamicAddresses\" : 5\n              } ],\n              \"segmentationId\" : \"segmentationId\"\n            },\n            \"layerProtocol\" : \"IP_OVER_ETHERNET\"\n          } ],\n          \"netAttDefResourceId\" : [ null, null ],\n          \"createExtLinkPort\" : true\n        }\n      }\n    } ]\n  } ],\n  \"id\" : \"id\",\n  \"isAutomaticInvocation\" : true,\n  \"operation\" : \"INSTANTIATE\"\n}",
							VnfLcmOpOcc.class), HttpStatus.NOT_IMPLEMENTED);
				} catch (final IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
				}
			}
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfLcmOpOccsApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The POST method initiates retrying a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"Individual VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state. See clause 5.4.14.3.1. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "202", description = "202 ACCEPTED  Shall be returned when the request has been accepted for processing. The response shall have an empty message content. "),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the message content contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND  Shall be returned upon the following error: The API producer did not find a current representation for the target resource or is not willing to disclose that one exists. The general cause for this error and its handling is specified in clause 6.4 of ETSI GS NFV-SOL 013 [8], including rules for the presence of the response body. Specifically in case of this task resource, the response code 404 shall also be returned if the task is not supported for the VNF LCM operation occurrence represented by the parent resource, which means that the task resource consequently does not exist. In this case, the response body shall be present, and shall contain a ProblemDetails structure, in which the \"detail\" attribute shall convey more information about the error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT  Shall be returned upon the following error: The operation cannot be executed currently, due to a conflict with the state of the VNF LCM operation occurrence. Typically, this is due to the fact that the VNF LCM operation occurrence is not in FAILED_TEMP state, or another error handling action is starting, such as rollback or fail. The response body shall contain a ProblemDetails structure, in which the \"detail\" attribute shall convey more information about the error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_lcm_op_occs/{vnfLcmOpOccId}/retry", produces = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> vnfLcmOpOccsVnfLcmOpOccIdRetryPost(@Parameter(in = ParameterIn.PATH, description = "Identifier of a VNF lifecycle management operation occurrence. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a PATCH or POST request triggering a VNF LCM operation. It can also be retrieved from the \"vnfLcmOpOccId\" attribute in the VnfLcmOperationOccurrenceNotification. ", required = true, schema = @Schema()) @PathVariable("vnfLcmOpOccId") final String vnfLcmOpOccId, @Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfLcmOpOccsApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

	@Operation(summary = "", description = "The POST method initiates rolling back a VNF lifecycle operation if that operation has experienced a temporary failure, i.e. the related \"Individual VNF LCM operation occurrence\" resource is in \"FAILED_TEMP\" state. See clause 5.4.15.3.1. ", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "202", description = "202 ACCEPTED  Shall be returned when the request has been accepted for processing. The response shall have an empty message content. "),

			@ApiResponse(responseCode = "400", description = "400 BAD REQUEST 400 code can be returned in the following specified cases, the specific cause has to be proper specified in the \"ProblemDetails\" structure to be returned. If the request is malformed or syntactically incorrect (e.g. if the request URI contains incorrect query parameters or the message content contains a syntactically incorrect data structure), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If the response to a GET request which queries a container resource would be so big that the performance of the API producer is adversely affected, and the API producer does not support paging for the affected resource, it shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and should include in the \"detail\" attribute more information about the source of the problem. If there is an application error related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. If the request contains a malformed access token, the API producer should respond with this response. The details of the error shall be returned in the WWW Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. The use of this HTTP error response code described above is applicable to the use of the OAuth 2.0 for the authorization of API requests and notifications, as defined in clauses 4.5.3.3 and 4.5.3.4. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "401", description = "401 UNAUTHORIZED If the request contains no access token even though one is required, or if the request contains an authorization token that is invalid (e.g. expired or revoked), the API producer should respond with this response. The details of the error shall be returned in the WWW-Authenticate HTTP header, as defined in IETF RFC 6750 and IETF RFC 7235. The ProblemDetails structure may be provided. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "403", description = "403 FORBIDDEN If the API consumer is not allowed to perform a particular request to a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided. It should include in the \"detail\" attribute information about the source of the problem, and may indicate how to solve it. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "404", description = "404 NOT FOUND  Shall be returned upon the following error: The API producer did not find a current representation for the target resource or is not willing to disclose that one exists. The general cause for this error and its handling is specified in clause 6.4 of ETSI GS NFV-SOL 013 [8], including rules for the presence of the response body. Specifically in case of this task resource, the response code 404 shall also be returned if the task is not supported for the VNF LCM operation occurrence represented by the parent resource, which means that the task resource consequently does not exist. In this case, the response body shall be present, and shall contain a ProblemDetails structure, in which the \"detail\" attribute shall convey more information about the error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "405", description = "405 METHOD NOT ALLOWED If a particular HTTP method is not supported for a particular resource, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "406", description = "406 NOT ACCEPTABLE If the \"Accept\" HTTP header does not contain at least one name of a content type that is acceptable to the API producer, the API producer shall respond with this response code. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "409", description = "409 CONFLICT  Shall be returned upon the following error: The operation cannot be executed currently, due to a conflict with the state of the VNF LCM operation occurrence. Typically, this is due to the fact that the VNF LCM operation occurrence is not in FAILED_TEMP state, or another error handling action is starting, such as retry or fail. The response body shall contain a ProblemDetails structure, in which the \"detail\" attribute shall convey more information about the error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "500", description = "500 INTERNAL SERVER ERROR If there is an application error not related to the client's input that cannot be easily mapped to any other HTTP response code (\"catch all error\"), the API producer shall respond with this response code. The \"ProblemDetails\" structure shall be provided, and shall include in the \"detail\" attribute more information about the source of the problem. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "503", description = "503 SERVICE UNAVAILABLE If the API producer encounters an internal overload situation of itself or of a system it relies on, it should respond with this response code, following the provisions in IETF RFC 7231 for the use of the \"Retry-After\" HTTP header and for the alternative to refuse the connection. The \"ProblemDetails\" structure may be omitted. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))),

			@ApiResponse(responseCode = "504", description = "504 GATEWAY TIMEOUT If the API producer encounters a timeout while waiting for a response from an upstream server (i.e. a server that the API producer communicates with when fulfilling a request), it should respond with this response code. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))) })
	@RequestMapping(value = "/vnf_lcm_op_occs/{vnfLcmOpOccId}/rollback", produces = { "application/json" }, method = RequestMethod.POST)
	default ResponseEntity<Void> vnfLcmOpOccsVnfLcmOpOccIdRollbackPost(@Parameter(in = ParameterIn.PATH, description = "Identifier of a VNF lifecycle management operation occurrence. This identifier can be retrieved from the resource referenced by the \"Location\" HTTP header in the response to a PATCH or POST request triggering a VNF LCM operation. It can also be retrieved from the \"vnfLcmOpOccId\" attribute in the VnfLcmOperationOccurrenceNotification. ", required = true, schema = @Schema()) @PathVariable("vnfLcmOpOccId") final String vnfLcmOpOccId, @Parameter(in = ParameterIn.HEADER, description = "Version of the API requested to use when responding to this request. ", required = true, schema = @Schema()) @RequestHeader(value = "Version", required = true) final String version, @Parameter(in = ParameterIn.HEADER, description = "The authorization token for the request. Reference: IETF RFC 7235. ", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) final String authorization) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
		} else {
			log.warn("ObjectMapper or HttpServletRequest not configured in default VnfLcmOpOccsApi interface so no example is generated");
		}
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
	}

}
